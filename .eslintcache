[{"C:\\scratch\\Tweeder\\src\\index.js":"1","C:\\scratch\\Tweeder\\src\\App.js":"2","C:\\scratch\\Tweeder\\src\\FrontPage.js":"3","C:\\scratch\\Tweeder\\src\\home.js":"4","C:\\scratch\\Tweeder\\src\\NarBar.js":"5","C:\\scratch\\Tweeder\\src\\Shared\\appState.js":"6","C:\\scratch\\Tweeder\\src\\footer.js":"7","C:\\scratch\\Tweeder\\src\\Shared\\ApiCall.js":"8","C:\\scratch\\Tweeder\\src\\Home.js":"9"},{"size":179,"mtime":1615988884000,"results":"10","hashOfConfig":"11"},{"size":3282,"mtime":1616151991059,"results":"12","hashOfConfig":"11"},{"size":1576,"mtime":1615988884000,"results":"13","hashOfConfig":"11"},{"size":13048,"mtime":1615975927818,"results":"14","hashOfConfig":"11"},{"size":2158,"mtime":1615988884000,"results":"15","hashOfConfig":"11"},{"size":720,"mtime":1616148832133,"results":"16","hashOfConfig":"11"},{"size":409,"mtime":1615988884000,"results":"17","hashOfConfig":"11"},{"size":963,"mtime":1615988884000,"results":"18","hashOfConfig":"11"},{"size":13048,"mtime":1615975927818,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r423w8",{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":1,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\scratch\\Tweeder\\src\\index.js",[],"C:\\scratch\\Tweeder\\src\\App.js",["42","43","44"],"C:\\scratch\\Tweeder\\src\\FrontPage.js",["45","46"],"C:\\scratch\\Tweeder\\src\\home.js",["47","48","49","50","51","52"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport HomePage from \"./HomePage.module.scss\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Footer from \"./footer.js\";\r\n\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nconst TrendingTweets = [\r\n  { TweetName: \"programming\", NumberOfTweets: \"200k\" },\r\n  { TweetName: \"devchallenges\", NumberOfTweets: \"123k\" },\r\n  { TweetName: \"frontend\", NumberOfTweets: \"34k\" },\r\n  { TweetName: \"helsinki\", NumberOfTweets: \"11k\" },\r\n  { TweetName: \"100DaysOfCode\", NumberOfTweets: \"5k\" },\r\n  { TweetName: \"learntoCode\", NumberOfTweets: \"1k\" }\r\n];\r\n\r\nconst home = () => {\r\n  const [OpenPopover, SetOpenPopover] = useState(false);\r\n  const ClosePopOver = () => SetOpenPopover(false);\r\n  const OpenPopoverFunc = (event) => SetOpenPopover(event.currentTarget);\r\n\r\n  return (\r\n    <div className={HomePage.background}>\r\n      <PerfectScrollbar className={HomePage.PostBody}>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={8}>\r\n            <div className={HomePage.AddTweetContainer}>\r\n              <Typography variant=\"button\" gutterBottom>\r\n                Tweet Something\r\n              </Typography>\r\n              <Divider />\r\n              <div className={HomePage.AddTweetContent}>\r\n                <div className={HomePage.AddTweetTextboxContainer}>\r\n                  <Avatar variant=\"rounded\">s</Avatar>\r\n\r\n                  <TextField\r\n                    classes={{ root: HomePage.AddTweetTextbox }}\r\n                    fullWidth={true}\r\n                    label=\"Whats Happening?\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className={HomePage.AddTweetBottom}>\r\n                <div>\r\n                  <IconButton>\r\n                    <ImageIcon />\r\n                  </IconButton>\r\n                  <Button onClick={OpenPopoverFunc} color=\"primary\">\r\n                    {\" \"}\r\n                    <PublicIcon /> <p> Everyone can reply </p>\r\n                  </Button>\r\n                </div>\r\n\r\n                <div>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Tweet\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <Paper\r\n              classes={{ root: HomePage.TrendingTweetsContainer }}\r\n              elevation={0}\r\n            >\r\n              <CardHeader\r\n                avatar={\r\n                  <Avatar\r\n                    variant=\"rounded\"\r\n                    src=\"https://i.pinimg.com/originals/d8/ab/6a/d8ab6a527914cba58261361792653287.jpg\"\r\n                    alt=\"derp\"\r\n                  />\r\n                }\r\n                classes={{\r\n                  root: \"TextAllignLeft\"\r\n                }}\r\n                title=\"derp\"\r\n                subheader={\"August 20, 2020 at 20:43 \"}\r\n              />{\" \"}\r\n              <CardContent>\r\n                {\" \"}\r\n                <Typography\r\n                  classes={{\r\n                    root: \"TextAllignLeft\"\r\n                  }}\r\n                  variant=\"body2\"\r\n                  component=\"p\"\r\n                >\r\n                  Nen dsanoifnoiegiwegniwegnoiwefoief\r\n                </Typography>\r\n                <Typography\r\n                  align=\"right\"\r\n                  variant=\"caption\"\r\n                  display=\"block\"\r\n                  gutterBottom\r\n                >\r\n                  449 Comments 59k Retweets 234 Saved\r\n                </Typography>\r\n                <Divider />\r\n                <div className={HomePage.PostButtonsContainer}>\r\n                  {\" \"}\r\n                  <Button>\r\n                    {\" \"}\r\n                    <CommentIcon /> <p> Comment</p>\r\n                  </Button>\r\n                  <Button classes={{ root: HomePage.RetweetBtn }}>\r\n                    {\" \"}\r\n                    <AutorenewIcon /> <p> Retweeted</p>\r\n                  </Button>\r\n                  <Button classes={{ root: HomePage.LikedBtn }}>\r\n                    {\" \"}\r\n                    <FavoriteBorderIcon /> <p> Liked</p>\r\n                  </Button>\r\n                  <Button classes={{ root: HomePage.SavedBtn }}>\r\n                    {\" \"}\r\n                    <BookmarkBorderIcon /> <p> Saved</p>\r\n                  </Button>\r\n                </div>\r\n                <Divider />\r\n              </CardContent>\r\n              <CardHeader\r\n                avatar={<Avatar variant=\"rounded\" alt=\"\" src=\"\"></Avatar>}\r\n                classes={{\r\n                  root: \"TextAllignLeft\"\r\n                }}\r\n                title={\r\n                  <div>\r\n                    <InputBase\r\n                      fullWidth={true}\r\n                      multiline={true}\r\n                      value=\"\"\r\n                      classes={{ root: HomePage.AddCommentTextBox }}\r\n                      placeholder=\"Tweet Your Reply\"\r\n                      endAdornment={\r\n                        <IconButton>\r\n                          <ImageIcon />\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </div>\r\n                }\r\n              />\r\n              <CardHeader\r\n                avatar={<Avatar variant=\"rounded\" alt=\"\" src=\"\"></Avatar>}\r\n                classes={{\r\n                  root: \"TextAllignLeft\"\r\n                }}\r\n                title={\r\n                  <>\r\n                    <div className={HomePage.DisplayCommentTextBox}>\r\n                      <div>\r\n                        <Typography\r\n                          display=\"inline\"\r\n                          variant=\"subtitle1\"\r\n                          gutterBottom\r\n                        >\r\n                          Bob Smithty {\"        \"}\r\n                        </Typography>\r\n\r\n                        <Typography\r\n                          display=\"inline\"\r\n                          variant=\"caption\"\r\n                          gutterBottom\r\n                        >\r\n                          August 20, 2020 at 20:43\r\n                        </Typography>\r\n                      </div>\r\n                      <Typography variant=\"body2\" gutterBottom>\r\n                        This is a test comment. TEST TESTTESTTESTTESTTEST\r\n                        TESTTESTTESTTESTTESTTESTTEST\r\n                      </Typography>\r\n                    </div>\r\n\r\n                    <Button size=\"small\" classes={{ root: HomePage.LikedBtn }}>\r\n                      {\" \"}\r\n                      <FavoriteBorderIcon /> Liked\r\n                    </Button>\r\n\r\n                    <Typography display=\"inline\" variant=\"caption\" gutterBottom>\r\n                      12.3 Likes\r\n                    </Typography>\r\n                  </>\r\n                }\r\n              />\r\n            </Paper>\r\n\r\n            <Popover\r\n              classes={{ paper: HomePage.AddTweetPopover }}\r\n              open={Boolean(OpenPopover)}\r\n              anchorEl={OpenPopover}\r\n              onClose={ClosePopOver}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"center\"\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"center\"\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Who can reply?\r\n              </Typography>\r\n\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                Choose who can reply to this Tweet\r\n              </Typography>\r\n              <Button\r\n                classes={{ root: HomePage.PopoverButtons }}\r\n                fullWidth={true}\r\n              >\r\n                {\" \"}\r\n                <PublicIcon /> <p> Everyone </p>\r\n              </Button>\r\n\r\n              <Button\r\n                classes={{ root: HomePage.PopoverButtons }}\r\n                fullWidth={true}\r\n              >\r\n                {\" \"}\r\n                <PeopleIcon /> <p> People you follow </p>\r\n              </Button>\r\n            </Popover>\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <Paper\r\n              classes={{ root: HomePage.TrendingTweetsContainer }}\r\n              elevation={0}\r\n            >\r\n              {\" \"}\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Trends for you\r\n              </Typography>{\" \"}\r\n              <Divider />\r\n              {TrendingTweets.map((tweet) => {\r\n                return (\r\n                  <div>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      #{tweet.TweetName}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" gutterBottom>\r\n                      {tweet.NumberOfTweets} Tweets\r\n                    </Typography>\r\n                  </div>\r\n                );\r\n              })}\r\n            </Paper>\r\n\r\n            <Paper\r\n              classes={{ root: HomePage.TrendingTweetsContainer }}\r\n              elevation={0}\r\n            >\r\n              {\" \"}\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Who to Follow\r\n              </Typography>{\" \"}\r\n              <Divider />\r\n              <CardHeader\r\n                avatar={\r\n                  <Avatar\r\n                    variant=\"rounded\"\r\n                    src=\"https://i.pinimg.com/originals/d8/ab/6a/d8ab6a527914cba58261361792653287.jpg\"\r\n                    alt=\"derp\"\r\n                  />\r\n                }\r\n                classes={{\r\n                  root: \"TextAllignLeft\"\r\n                }}\r\n                title={\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    Derp\r\n                  </Typography>\r\n                }\r\n                subheader={\r\n                  <Typography variant=\"body2\" gutterBottom>\r\n                    230k Followers\r\n                  </Typography>\r\n                }\r\n                action={\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Tweet\r\n                  </Button>\r\n                }\r\n              />\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                MUNCH MUNCHMUNCHMUNCHMUNCHMUNCH MUNCH MUNCH MUNCH MUNCH MUNCH\r\n              </Typography>\r\n              <img\r\n                style={{ height: \"100%\", width: \"100%\" }}\r\n                src=\"https://lh3.googleusercontent.com/proxy/tmZo_sc4Pczuo9Xy6wTC8Z3Iv6rtVKJNwoOmpjH8F5Un3lVOGLo54-EgEbdpZbFWQzpItkjERjP4mbtTRVvKC2zJt_fScfp1OrB-_q0N0Ds\"\r\n              />\r\n              <Divider />\r\n              <CardHeader\r\n                avatar={\r\n                  <Avatar\r\n                    variant=\"rounded\"\r\n                    src=\"https://pm1.narvii.com/6170/6b10b3eafebf6f89c28da751e9748976732f5d24_hq.jpg\"\r\n                    alt=\"derp\"\r\n                  />\r\n                }\r\n                classes={{\r\n                  root: \"TextAllignLeft\"\r\n                }}\r\n                title={\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    Derp\r\n                  </Typography>\r\n                }\r\n                subheader={\r\n                  <Typography variant=\"body2\" gutterBottom>\r\n                    230k Followers\r\n                  </Typography>\r\n                }\r\n                action={\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Tweet\r\n                  </Button>\r\n                }\r\n              />\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                MUNCH MUNCHMUNCHMUNCHMUNCHMUNCH MUNCH MUNCH MUNCH MUNCH MUNCH\r\n              </Typography>\r\n              <img\r\n                style={{ height: \"100%\", width: \"100%\" }}\r\n                src=\"https://pm1.narvii.com/6170/6b10b3eafebf6f89c28da751e9748976732f5d24_hq.jpg\"\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n          <Footer />\r\n        </Grid>\r\n      </PerfectScrollbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default home;\r\n",["53","54"],"C:\\scratch\\Tweeder\\src\\NarBar.js",["55","56","57"],"C:\\scratch\\Tweeder\\src\\Shared\\appState.js",["58","59"],"import { observable, action, computed } from \"mobx\";\nimport { ApiCall } from \"./ApiCall\";\nimport { createContext } from \"react\";\n\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nclass AppState {\n  @observable Auth0Client = \"\";\n\n  @action GetAuth0Client = async () => {\n   await  createAuth0Client({\n      domain: \"dev-5wttvoce.auth0.com\",\n      client_id: \"a47WBv2GDMgTgLLpbRkDQK31mkPVcnGh\",\n      //Redirect URL when authenication suceeds\n      redirect_uri: `${process.env.REACT_APP_FrontEndSiteURL}`\n      /*, audience: \"https://TweederClone.com\" */\n    }).then((auth0) => {\n      this.Auth0Client = auth0;\n    });\n  };\n}\n \nconst appStateContext = createContext(new AppState());\nexport default appStateContext;\n",["60","61"],"C:\\scratch\\Tweeder\\src\\footer.js",[],"C:\\scratch\\Tweeder\\src\\Shared\\ApiCall.js",[],"C:\\scratch\\Tweeder\\src\\Home.js",["62","63","64","65","66","67"],{"ruleId":"68","severity":1,"message":"69","line":28,"column":13,"nodeType":"70","endLine":54,"endColumn":4},{"ruleId":"68","severity":1,"message":"71","line":54,"column":6,"nodeType":"72","endLine":54,"endColumn":8,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":55,"column":3,"nodeType":"76","messageId":"77","endLine":57,"endColumn":4},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"82","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"83","line":1,"column":38,"nodeType":"80","messageId":"81","endLine":1,"endColumn":48},{"ruleId":"78","severity":1,"message":"84","line":10,"column":8,"nodeType":"80","messageId":"81","endLine":10,"endColumn":19},{"ruleId":"85","severity":2,"message":"86","line":36,"column":41,"nodeType":"80","endLine":36,"endColumn":49},{"ruleId":"87","severity":1,"message":"88","line":308,"column":15,"nodeType":"89","endLine":311,"endColumn":17},{"ruleId":"87","severity":1,"message":"88","line":343,"column":15,"nodeType":"89","endLine":346,"endColumn":17},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"82","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"83","line":1,"column":38,"nodeType":"80","messageId":"81","endLine":1,"endColumn":48},{"ruleId":"78","severity":1,"message":"94","line":1,"column":30,"nodeType":"80","messageId":"81","endLine":1,"endColumn":38},{"ruleId":"78","severity":1,"message":"95","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":17},{"ruleId":"90","replacedBy":"96"},{"ruleId":"92","replacedBy":"97"},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"82","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"83","line":1,"column":38,"nodeType":"80","messageId":"81","endLine":1,"endColumn":48},{"ruleId":"78","severity":1,"message":"84","line":10,"column":8,"nodeType":"80","messageId":"81","endLine":10,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":313,"column":15,"nodeType":"89","endLine":316,"endColumn":17},{"ruleId":"87","severity":1,"message":"88","line":348,"column":15,"nodeType":"89","endLine":351,"endColumn":17},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'Authenicated' and 'appState'. Either include them or remove the dependency array.","ArrayExpression",["98"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useContext' is defined but never used.","'CardActions' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"home\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["99"],"no-negated-in-lhs",["100"],"'computed' is defined but never used.","'ApiCall' is defined but never used.",["99"],["100"],{"desc":"101","fix":"102"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [Authenicated, appState]",{"range":"103","text":"104"},[1621,1623],"[Authenicated, appState]"]